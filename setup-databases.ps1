# PowerShell script to setup PostgreSQL databases for microservices
# This script creates databases and clears existing data

Write-Host "=== DATABASE SETUP FOR MICROSERVICES ===" -ForegroundColor Green
Write-Host ""

# Function to check if PostgreSQL is running
function Test-PostgreSQLConnection {
    Write-Host "Checking PostgreSQL connection..." -ForegroundColor Yellow

    try {
        $connection = Test-NetConnection -ComputerName localhost -Port 5432 -WarningAction SilentlyContinue
        if ($connection.TcpTestSucceeded) {
            Write-Host "PostgreSQL is running on localhost:5432" -ForegroundColor Green
            return $true
        } else {
            Write-Host "PostgreSQL is not running on localhost:5432" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "Error checking PostgreSQL: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to execute SQL command
function Invoke-SqlCommand {
    param(
        [string]$Command,
        [string]$Database = "postgres"
    )

    try {
        $env:PGPASSWORD = "1234"
        $result = psql -U postgres -d $Database -c $Command 2>&1
        if ($LASTEXITCODE -eq 0) {
            return $true
        } else {
            Write-Host "SQL Error: $result" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "Error executing SQL: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Check PostgreSQL connection
if (-not (Test-PostgreSQLConnection)) {
    Write-Host "Please start PostgreSQL service and try again." -ForegroundColor Yellow
    exit 1
}

Write-Host "1. CREATING DATABASES..." -ForegroundColor Cyan

# Create databases
$databases = @("customerdb", "jobdb", "customercontractdb", "customerpaymentdb")

foreach ($db in $databases) {
    Write-Host "Creating database: $db" -ForegroundColor Yellow
    $createResult = Invoke-SqlCommand -Command "CREATE DATABASE $db;" -Database "postgres"
    if ($createResult) {
        Write-Host "‚úì Database $db created successfully" -ForegroundColor Green
    } else {
        Write-Host "‚Ñπ Database $db may already exist" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "2. CLEARING EXISTING DATA..." -ForegroundColor Cyan

# Clear job service data
Write-Host "Clearing job service data..." -ForegroundColor Yellow
$jobClearCommands = @(
    "DROP TABLE IF EXISTS work_shifts CASCADE;",
    "DROP TABLE IF EXISTS job_details CASCADE;",
    "DROP TABLE IF EXISTS jobs CASCADE;",
    "DELETE FROM job_categories WHERE id > 0;"
)

foreach ($cmd in $jobClearCommands) {
    Invoke-SqlCommand -Command $cmd -Database "jobdb" | Out-Null
}

# Clear contract service data
Write-Host "Clearing contract service data..." -ForegroundColor Yellow
$contractClearCommands = @(
    "DROP TABLE IF EXISTS work_shifts CASCADE;",
    "DROP TABLE IF EXISTS job_details CASCADE;",
    "DROP TABLE IF EXISTS customer_contracts CASCADE;"
)

foreach ($cmd in $contractClearCommands) {
    Invoke-SqlCommand -Command $cmd -Database "customercontractdb" | Out-Null
}

# Clear payment service data
Write-Host "Clearing payment service data..." -ForegroundColor Yellow
Invoke-SqlCommand -Command "DELETE FROM customer_payments WHERE id > 0;" -Database "customerpaymentdb" | Out-Null

Write-Host ""
Write-Host "3. SETTING UP VIETNAMESE JOB CATEGORIES..." -ForegroundColor Cyan

# Setup Vietnamese job categories
$jobCategories = @(
    "('C√¥ng nh√¢n x√¢y d·ª±ng', 'C√¥ng vi·ªác li√™n quan ƒë·∫øn x√¢y d·ª±ng, thi c√¥ng c√°c c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ ƒëi·ªán', 'L·∫Øp ƒë·∫∑t, s·ª≠a ch·ªØa h·ªá th·ªëng ƒëi·ªán trong c√°c c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ n∆∞·ªõc', 'L·∫Øp ƒë·∫∑t, s·ª≠a ch·ªØa h·ªá th·ªëng c·∫•p tho√°t n∆∞·ªõc', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ h√†n', 'H√†n c√°c k·∫øt c·∫•u th√©p, kim lo·∫°i trong x√¢y d·ª±ng', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ s∆°n', 'S∆°n t∆∞·ªùng, s∆°n k·∫øt c·∫•u c√°c c√¥ng tr√¨nh x√¢y d·ª±ng', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('C√¥ng nh√¢n v·∫≠n chuy·ªÉn', 'V·∫≠n chuy·ªÉn v·∫≠t li·ªáu, h√†ng h√≥a t·∫°i c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ m·ªôc', 'L√†m ƒë·ªì g·ªó, v√°n khu√¥n, c·ªëp pha cho x√¢y d·ª±ng', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ ·ªëp l√°t', '·ªêp l√°t g·∫°ch, ƒë√° cho c√°c c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('C√¥ng nh√¢n d·ªçn d·∫πp', 'D·ªçn d·∫πp v·ªá sinh c√¥ng tr√¨nh, khu v·ª±c l√†m vi·ªác', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ c∆° kh√≠', 'S·ª≠a ch·ªØa, b·∫£o tr√¨ m√°y m√≥c thi·∫øt b·ªã x√¢y d·ª±ng', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('C√¥ng nh√¢n b·∫£o v·ªá', 'B·∫£o v·ªá an ninh t·∫°i c√°c c√¥ng tr√¨nh x√¢y d·ª±ng', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ l√†m v∆∞·ªùn', 'ChƒÉm s√≥c c√¢y xanh, thi·∫øt k·∫ø c·∫£nh quan', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('C√¥ng nh√¢n kho b√£i', 'Qu·∫£n l√Ω, s·∫Øp x·∫øp v·∫≠t t∆∞ trong kho', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ l√°i xe', 'L√°i xe t·∫£i, xe m√°y x√∫c t·∫°i c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('C√¥ng nh√¢n ph·ª• vi·ªác', 'H·ªó tr·ª£ c√°c c√¥ng vi·ªác ph·ª• t·∫°i c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Nh√¢n vi√™n vƒÉn ph√≤ng', 'C√¥ng vi·ªác h√†nh ch√≠nh, vƒÉn th∆∞ t·∫°i c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('K·ªπ thu·∫≠t vi√™n', 'H·ªó tr·ª£ k·ªπ thu·∫≠t, gi√°m s√°t ch·∫•t l∆∞·ª£ng c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ m√°y', 'V·∫≠n h√†nh m√°y m√≥c thi·∫øt b·ªã x√¢y d·ª±ng', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('C√¥ng nh√¢n an to√†n', 'ƒê·∫£m b·∫£o an to√†n lao ƒë·ªông t·∫°i c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)",
    "('Th·ª£ c·∫Øt g·∫°ch', 'C·∫Øt, gia c√¥ng g·∫°ch ƒë√° cho c√¥ng tr√¨nh', false, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
)

$insertSql = "INSERT INTO job_categories (name, description, is_deleted, created_at, updated_at) VALUES " + ($jobCategories -join ", ") + " ON CONFLICT (name) DO NOTHING;"

Write-Host "Inserting Vietnamese job categories..." -ForegroundColor Yellow
$insertResult = Invoke-SqlCommand -Command $insertSql -Database "jobdb"

if ($insertResult) {
    Write-Host "‚úì Vietnamese job categories inserted successfully" -ForegroundColor Green
} else {
    Write-Host "‚úó Failed to insert job categories" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéâ DATABASE SETUP COMPLETED!" -ForegroundColor Green
Write-Host ""
Write-Host "DATABASES CREATED:" -ForegroundColor Cyan
Write-Host "  ‚úì customerdb" -ForegroundColor White
Write-Host "  ‚úì jobdb (with Vietnamese job categories)" -ForegroundColor White
Write-Host "  ‚úì customercontractdb" -ForegroundColor White
Write-Host "  ‚úì customerpaymentdb" -ForegroundColor White
Write-Host ""
Write-Host "Next step: Run .\build-and-deploy.ps1 to build and deploy microservices" -ForegroundColor Yellow
